-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from ExprPar.y
-----------------------------------------------------------------------------

state 26 contains 3 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_exprParser -> Expr                          (0)
	Expr -> var                                        (1)
	Expr -> num                                        (2)
	Expr -> '-' num                                    (3)
	Expr -> '(' Expr ')'                               (4)
	Expr -> let var '=' Expr in Expr end               (5)
	Expr -> if Expr then Expr else Expr                (6)
	Expr -> Expr '*' Expr                              (7)
	Expr -> Expr '+' Expr                              (8)
	Expr -> Expr '-' Expr                              (9)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { TokenLet }
	in             { TokenIn }
	end            { TokenEnd }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	num            { TokenNum $$ }
	var            { TokenVar $$ }
	'='            { TokenEq }
	'+'            { TokenAdd }
	'-'            { TokenSub }
	'*'            { TokenMul }
	'('            { TokenLPar }
	')'            { TokenRPar }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_exprParser rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	let            shift, and enter state 4
	if             shift, and enter state 5
	num            shift, and enter state 6
	var            shift, and enter state 2
	'-'            shift, and enter state 7
	'('            shift, and enter state 8

	Expr           goto state 3

State 1


	var            shift, and enter state 2


State 2

	Expr -> var .                                       (rule 1)

	in             reduce using rule 1
	end            reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_exprParser -> Expr .                         (rule 0)
	Expr -> Expr . '*' Expr                             (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)

	'+'            shift, and enter state 13
	'-'            shift, and enter state 14
	'*'            shift, and enter state 15
	%eof           accept


State 4

	Expr -> let . var '=' Expr in Expr end              (rule 5)

	var            shift, and enter state 12


State 5

	Expr -> if . Expr then Expr else Expr               (rule 6)

	let            shift, and enter state 4
	if             shift, and enter state 5
	num            shift, and enter state 6
	var            shift, and enter state 2
	'-'            shift, and enter state 7
	'('            shift, and enter state 8

	Expr           goto state 11

State 6

	Expr -> num .                                       (rule 2)

	in             reduce using rule 2
	end            reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 7

	Expr -> '-' . num                                   (rule 3)

	num            shift, and enter state 10


State 8

	Expr -> '(' . Expr ')'                              (rule 4)

	let            shift, and enter state 4
	if             shift, and enter state 5
	num            shift, and enter state 6
	var            shift, and enter state 2
	'-'            shift, and enter state 7
	'('            shift, and enter state 8

	Expr           goto state 9

State 9

	Expr -> '(' Expr . ')'                              (rule 4)
	Expr -> Expr . '*' Expr                             (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)

	'+'            shift, and enter state 13
	'-'            shift, and enter state 14
	'*'            shift, and enter state 15
	')'            shift, and enter state 21


State 10

	Expr -> '-' num .                                   (rule 3)

	in             reduce using rule 3
	end            reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 11

	Expr -> if Expr . then Expr else Expr               (rule 6)
	Expr -> Expr . '*' Expr                             (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)

	then           shift, and enter state 20
	'+'            shift, and enter state 13
	'-'            shift, and enter state 14
	'*'            shift, and enter state 15


State 12

	Expr -> let var . '=' Expr in Expr end              (rule 5)

	'='            shift, and enter state 19


State 13

	Expr -> Expr '+' . Expr                             (rule 8)

	let            shift, and enter state 4
	if             shift, and enter state 5
	num            shift, and enter state 6
	var            shift, and enter state 2
	'-'            shift, and enter state 7
	'('            shift, and enter state 8

	Expr           goto state 18

State 14

	Expr -> Expr '-' . Expr                             (rule 9)

	let            shift, and enter state 4
	if             shift, and enter state 5
	num            shift, and enter state 6
	var            shift, and enter state 2
	'-'            shift, and enter state 7
	'('            shift, and enter state 8

	Expr           goto state 17

State 15

	Expr -> Expr '*' . Expr                             (rule 7)

	let            shift, and enter state 4
	if             shift, and enter state 5
	num            shift, and enter state 6
	var            shift, and enter state 2
	'-'            shift, and enter state 7
	'('            shift, and enter state 8

	Expr           goto state 16

State 16

	Expr -> Expr . '*' Expr                             (rule 7)
	Expr -> Expr '*' Expr .                             (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)

	in             reduce using rule 7
	end            reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	')'            reduce using rule 7
	%eof           reduce using rule 7


State 17

	Expr -> Expr . '*' Expr                             (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr '-' Expr .                             (rule 9)

	in             reduce using rule 9
	end            reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            shift, and enter state 15
	')'            reduce using rule 9
	%eof           reduce using rule 9


State 18

	Expr -> Expr . '*' Expr                             (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr '+' Expr .                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)

	in             reduce using rule 8
	end            reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            shift, and enter state 15
	')'            reduce using rule 8
	%eof           reduce using rule 8


State 19

	Expr -> let var '=' . Expr in Expr end              (rule 5)

	let            shift, and enter state 4
	if             shift, and enter state 5
	num            shift, and enter state 6
	var            shift, and enter state 2
	'-'            shift, and enter state 7
	'('            shift, and enter state 8

	Expr           goto state 23

State 20

	Expr -> if Expr then . Expr else Expr               (rule 6)

	let            shift, and enter state 4
	if             shift, and enter state 5
	num            shift, and enter state 6
	var            shift, and enter state 2
	'-'            shift, and enter state 7
	'('            shift, and enter state 8

	Expr           goto state 22

State 21

	Expr -> '(' Expr ')' .                              (rule 4)

	in             reduce using rule 4
	end            reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 22

	Expr -> if Expr then Expr . else Expr               (rule 6)
	Expr -> Expr . '*' Expr                             (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)

	else           shift, and enter state 25
	'+'            shift, and enter state 13
	'-'            shift, and enter state 14
	'*'            shift, and enter state 15


State 23

	Expr -> let var '=' Expr . in Expr end              (rule 5)
	Expr -> Expr . '*' Expr                             (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)

	in             shift, and enter state 24
	'+'            shift, and enter state 13
	'-'            shift, and enter state 14
	'*'            shift, and enter state 15


State 24

	Expr -> let var '=' Expr in . Expr end              (rule 5)

	let            shift, and enter state 4
	if             shift, and enter state 5
	num            shift, and enter state 6
	var            shift, and enter state 2
	'-'            shift, and enter state 7
	'('            shift, and enter state 8

	Expr           goto state 27

State 25

	Expr -> if Expr then Expr else . Expr               (rule 6)

	let            shift, and enter state 4
	if             shift, and enter state 5
	num            shift, and enter state 6
	var            shift, and enter state 2
	'-'            shift, and enter state 7
	'('            shift, and enter state 8

	Expr           goto state 26

State 26

	Expr -> if Expr then Expr else Expr .               (rule 6)
	Expr -> Expr . '*' Expr                             (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)

	in             reduce using rule 6
	end            reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	'+'            shift, and enter state 13
			(reduce using rule 6)

	'-'            shift, and enter state 14
			(reduce using rule 6)

	'*'            shift, and enter state 15
			(reduce using rule 6)

	')'            reduce using rule 6
	%eof           reduce using rule 6


State 27

	Expr -> let var '=' Expr in Expr . end              (rule 5)
	Expr -> Expr . '*' Expr                             (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)

	end            shift, and enter state 28
	'+'            shift, and enter state 13
	'-'            shift, and enter state 14
	'*'            shift, and enter state 15


State 28

	Expr -> let var '=' Expr in Expr end .              (rule 5)

	in             reduce using rule 5
	end            reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 10
Number of terminals: 14
Number of non-terminals: 2
Number of states: 29
